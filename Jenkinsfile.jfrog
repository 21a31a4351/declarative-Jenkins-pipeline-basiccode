pipeline {
    agent {
        label 'app'
    }
    triggers {
        pollSCM('* * * * *')
    }
    stages {
        stage('git-clone') {
            steps {
                git url: 'https://github.com/21a31a4351/spring-petclinic.git', branch: 'main'
            }
        }
        stage('sonarqube-scan') {
            steps {
                withCredentials([string(credentialsId: 'sonar_id', variable: 'sonar_token')]) {
                    withSonarQubeEnv('sonarqube') {
                        sh """mvn package sonar:sonar \
                          -Dsonar.projectKey=javamainapplication_javaapp \
                          -Dsonar.organization=javamainapplication \
                          -Dsonar.host.url=https://sonarcloud.io \
                          -Dsonar.login=$sonar_token"""
                    }
                }
            }
        }
        stage('upload-file') {
            steps {
                script {
                    def server = Artifactory.server 'nandakishore_id'
                    def buildInfo = Artifactory.newBuildInfo()

                    server.upload(
                        spec: '''{
                            "files": [
                                {
                                    "pattern": "target/*.jar",
                                    "target": "newrepo-libs-release-local/"
                                }
                            ]
                        }''',
                        buildInfo: buildInfo
                    )

                    server.publishBuildInfo(buildInfo)
                }
            }
        }
    }

    post {
        always {
            junit '**/target/surefire-reports/*.xml'
            archiveArtifacts artifacts: '**/target/*.jar'
        }
        success {
            echo 'build successful in jfrog branch'
        }
        failure {
            echo 'build failed'
        }
    }
}
